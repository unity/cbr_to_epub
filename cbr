#!/usr/local/bin/ruby

require 'optparse'
require_relative 'lib/cbr_to_epub'

options = {}
OptionParser.new do |opts|
  opts.banner = 'Usage: cbr_to_epub [options]'

  opts.on('--inputs=*.FILES', Array, 'Glob of Input CBR files to be converted') do |inputs|
    options[:inputs] = Dir.glob(inputs).sort
  end

  opts.on('-w', '--watch FOLDER', 'Watch for directory') do |watch|
    options[:watch] = watch
  end

  opts.on('-i', '--input FILE', 'Input CBR file to be converted') do |input|
    options[:input] = input
  end

  opts.on('-o', '--output FILE', 'Output EPUB file that will be created, or a valid directory if --inputs has been used') do |output|
    options[:output] = output
  end

  opts.on('-a', '--author [AUTHOR]', 'Add author to metadata') do |author|
    options[:author] = author
  end

  opts.on('-d', '--delete', 'Delete Source Files') do |delete|
    options[:delete] = delete
  end

  opts.on('-t', '--title [TITLE]', 'Add title to metadata') do |title|
    options[:title] = title
  end
end.parse!

raise 'No input file specified' unless options[:input] or options[:inputs] or options[:watch]

puts "Starting with options"
puts options

if options[:inputs]
  puts ">>>>>>>>>>>>>>>>>>> Starting Processing of #{options[:inputs]}"
  options[:inputs].each do |input|
    convert(input, options[:output], options[:author], options[:title], options[:delete])
  end
elsif options[:watch]
  CbrToEpub::Watcher.new(options[:watch], options[:output], options[:delete])
  puts "Listening to changes on #{options[:watch]}"
  puts "Outputting to #{options[:output]}"
  sleep
else
  metadata = CbrToEpub::Output::Content::Metadata.new(options[:author], options[:title])
  converter = CbrToEpub::Converter.new(options[:input], options[:output] || (options[:input] + '.epub'), metadata)
  converter.convert
end

def convert input, output_folder, author, title
  output = CbrToEpub::Output.new(output_folder).for(input)
  puts ">>>>>>>>>>>>>>>>>>> Processing #{input} to #{output}"
  CbrToEpub::Converter.new(
    input,
    output,
    CbrToEpub::Output::Content::Metadata.new(
      author,
      title || File.basename(input).split('.').first
    )
  ).convert
  delete(input) if (options[:delete] === true)
end

def delete input
  puts ">>>>>>>>>>>>>>>>>>> Deleting #{input}"
  FileUtils.rm_rf(input)
end
